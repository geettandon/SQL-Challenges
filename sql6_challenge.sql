-- Intro
/*
You are a Marketing Analyst
The 'Sustainable Clothing Co.' have been running several marketing campaigns and have asked you to provide your insight into whether they have been successful or not. 
Analyse the following data and answer the questions to form your answer.
*/

-- Questions

-- 1. How many transactions were completed during each marketing campaign?
SELECT campaign_id,
    campaign_name,
    COUNT(transaction_id) AS num_txns
FROM marketing_campaigns AS M
INNER JOIN transactions AS T ON T.purchase_date BETWEEN M.start_date AND M.end_date
GROUP BY campaign_id
ORDER BY campaign_id ASC;

-- 2. Which product had the highest sales quantity?
SELECT S.product_id,
    S.product_name,
    SUM(quantity) AS sales_quantity
FROM transactions AS T
INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
GROUP BY S.product_id, S.product_name
ORDER BY sales_quantity DESC
LIMIT 1;

-- 3. What is the total revenue generated from each marketing campaign?
SELECT campaign_id,
    campaign_name,
    ROUND(CAST(SUM(S.price * quantity) AS NUMERIC), 2) AS total_revenue_generated
FROM marketing_campaigns AS M
INNER JOIN transactions AS T ON T.purchase_date BETWEEN M.start_date AND M.end_date
INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
GROUP BY campaign_id, campaign_name
ORDER BY campaign_id ASC;

-- 4. What is the top-selling product category based on the total revenue generated?
SELECT category,
    SUM(price * quantity) AS total_revenue_generated
FROM sustainable_clothing AS S 
INNER JOIN transactions AS T ON S.product_id = T.product_id
GROUP BY category
ORDER BY total_revenue_generated DESC
LIMIT 1;

-- 5. Which products had a higher quantity sold compared to the average quantity sold?
SELECT product_name,
    SUM(quantity) AS quantity_sold
FROM sustainable_clothing AS S 
INNER JOIN transactions AS T ON S.product_id = T.product_id
GROUP BY product_name
HAVING SUM(quantity) > (SELECT AVG(quantity) FROM transactions)
ORDER BY quantity_sold DESC;

-- 6. What is the average revenue generated per day during the marketing campaigns?
WITH revenue_during_campaigns AS (
    SELECT purchase_date,
        SUM(price * quantity) AS revenue_generated
    FROM marketing_campaigns AS M
    INNER JOIN transactions AS T ON T.purchase_date BETWEEN M.start_date AND M.end_date
    INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
    GROUP BY purchase_date
)

SELECT AVG(revenue_generated) AS avg_revenue_generated_during_marketing_campaigns
FROM revenue_during_campaigns;

-- 7. What is the percentage contribution of each product to the total revenue?
WITH sales_revenue AS (
    SELECT product_name,
        price * quantity AS revenue
    FROM transactions AS T
    INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
)

SELECT product_name,
    ROUND((SUM(revenue) / (SELECT SUM(revenue) FROM sales_revenue)) :: NUMERIC * 100, 2) AS percent_contribution_to_total_revenue
FROM sales_revenue
GROUP BY product_name
ORDER BY percent_contribution_to_total_revenue DESC;

-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns.
WITH marketing_campaigns_qty_sold AS (
    SELECT purchase_date,
        SUM(quantity) AS quantity
    FROM marketing_campaigns AS M
    INNER JOIN transactions AS T ON T.purchase_date BETWEEN M.start_date AND M.end_date
    GROUP BY purchase_date
),

normal_days_qty_sold AS (
    SELECT purchase_date,
        SUM(quantity) AS quantity
    FROM transactions
    WHERE purchase_date NOT IN (SELECT purchase_date FROM marketing_campaigns_qty_sold)
    GROUP BY purchase_date
)

SELECT ROUND(AVG(quantity), 2) AS avg_qty_sold_during_marketing_campaigns,
    (SELECT ROUND(AVG(quantity), 2) AS avg_qty_sold_outside_marketing_campaigns FROM normal_days_qty_sold)
FROM marketing_campaigns_qty_sold;

-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns.
WITH marketing_campaigns_revenue AS (
    SELECT purchase_date,
        SUM(price * quantity) AS revenue
    FROM marketing_campaigns AS M
    INNER JOIN transactions AS T ON T.purchase_date BETWEEN M.start_date AND M.end_date
    INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
    GROUP BY purchase_date
),

normal_days_revenue AS (
    SELECT purchase_date,
        SUM(price * quantity) AS revenue
    FROM transactions AS T
    INNER JOIN sustainable_clothing AS S ON T.product_id = S.product_id
    WHERE purchase_date NOT IN (SELECT purchase_date FROM marketing_campaigns_revenue)
    GROUP BY purchase_date
)

SELECT ROUND(SUM(revenue) :: NUMERIC, 2) AS revenue_during_marketing_campaigns,
    (SELECT ROUND(SUM(revenue):: NUMERIC, 2) AS revenue_outside_marketing_campaigns FROM normal_days_revenue)
FROM marketing_campaigns_revenue;

-- 10. Rank the products by their average daily quantity sold
WITH daily_qty_sold_per_product AS (
    SELECT product_name,
        purchase_date,
        SUM(quantity) AS qty_sold
    FROM sustainable_clothing AS S
    INNER JOIN transactions AS T ON S.product_id = T.product_id
    GROUP BY product_name, purchase_date
)

SELECT product_name,
    AVG(qty_sold) AS avg_daily_qty_sold,
    DENSE_RANK() OVER(ORDER BY AVG(qty_sold) DESC) AS rank
FROM daily_qty_sold_per_product
GROUP BY product_name;